// dp FSM
int maxProfit(vector<int>& prices)
{
    int siz = prices.size();
    vector<int> price(siz+1);
    for(int i=0; i<siz; i++)
        price[i+1] = prices[i];
    vector<int> hold(siz,0);
    vector<int> sold(siz,0);
    vector<int> rest(siz,0);
    hold[0] = -10000;
    for(int i=1; i<=siz; i++)
    {
        hold[i] = max(hold[i-1], rest[i-1]-price[i]);
        sold[i] = hold[i-1]+price[i];
        rest[i] = max(rest[i-1], sold[i-1]);
    }
    return max(rest[siz],sold[siz]);
}
// 改进，滚动数组 空间:O(1)