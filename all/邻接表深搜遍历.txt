#include <cstring>
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
#define For(i, n) for(int i=0; i<n; i++)
#define For1(i, n) for(int i=1; i<=n; i++)
#define ll long long
#define M 1000
struct Edge
{
    int to;
};
int Flag = 1;
vector<Edge> G[M];
int road[10001];
int vis[10001];
int step;
void dfs(int d, int n)
{
//    cout<<step<<endl;
    if(step == n-1)
    {
        For(i, n-1)
            cout<<road[i]<<" ";
        cout<<road[n-1]<<endl;
        return;
    }
    int siz = G[d].size();
    For(i, siz)
    {
        if(!vis[ G[d][i].to ])
        {
            road[++step] = G[d][i].to;
            vis[G[d][i].to] = 1;
            dfs(G[d][i].to, n);
            //vis[G[d][i].to] = 0;
            //step--;     //路遍历过就完事，不需回溯！！！
        }

    }
}
int main()
{
    int n,m;
    int s,e;
    int d;

    while(cin>>n>>m && (n||m))  // n顶点 m边
    {
        memset(vis, 0, sizeof(vis));
        step = 0;
        For(i, m)
        {
            Edge edg;
            scanf("%d%d", &s, &e);
            edg.to = e;
            G[s].push_back(edg);
            edg.to = s;
            G[e].push_back(edg);
        }
        cin>>d;
        road[step] = d;
        vis[d] = 1;
        dfs(d, n);
    }
    return 0;
}
